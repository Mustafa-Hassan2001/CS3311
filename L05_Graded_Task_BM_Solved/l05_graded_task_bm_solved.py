# -*- coding: utf-8 -*-
"""L05_Graded_Task_BM_Solved.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15UvoGA4BuCiycg8I1EJOGxFXavl62IE7

Read Basic-1-clean.csv thorugh pandas
"""

import pandas as pd

basic = pd.read_csv('Basic.csv')

"""Print Head Section and see if there is any NAN values or not"""

basic.head()

"""Choose Independent variables to [c1, c2, c3, c11] and
dependent Variable to c12
"""

basic = basic.dropna()

x = basic[["c1", "c2", "c3", "c11"]]
y = basic["c12"]

import numpy as np
from sklearn.preprocessing import LabelEncoder

y = LabelEncoder().fit_transform(basic['c12'].values.reshape(-1,1))

# x = x.values.reshape(-1,2)
# y= y.values.reshape(-1,1)

"""Split Your datatset into 3:4 partition"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression #Linear Model

# splitting the data
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.43, random_state = 42)


regression_model = LinearRegression().fit(x_train, y_train)
y_predicted = regression_model.predict(x_test)

"""Train your Regression Model on Training Dataset"""

regression_model.score(x_train, y_train)

"""Test your Model using Testing Data Set"""

regression_model.score(x_test, y_test)

"""Implement Evaluation Metrices"""

from sklearn.metrics import mean_squared_error, r2_score

# model evaluation
mse = mean_squared_error(y_test, y_predicted)
r2 = r2_score(y_test, y_predicted)

# printing values
print('Slope:' ,regression_model.coef_)
print('Intercept:', regression_model.intercept_)
print('Mean squared error: ', mse)
print('Root mean squared error: ', mse**(1/2.0))
print('R2 score: ', r2)

"""Do the above same task.. But this time you need change the dependent variable to c17. and You need to perform same task for the logistic regression."""

basic = basic.dropna()

x = basic[["c1", "c2", "c3", "c11"]]
y = basic["c17"]

import numpy as np
from sklearn.preprocessing import LabelEncoder

y = LabelEncoder().fit_transform(basic['c17'].values.reshape(-1,1))

# x = x.values.reshape(-1,2)
# y= y.values.reshape(-1,1)

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression #Linear Model

# splitting the data
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.43, random_state = 42)


regression_model = LinearRegression().fit(x_train, y_train)
y_predicted = regression_model.predict(x_test)

regression_model.score(x_train, y_train)

regression_model.score(x_test, y_test)

from sklearn.metrics import mean_squared_error, r2_score

# model evaluation
mse = mean_squared_error(y_test, y_predicted)
r2 = r2_score(y_test, y_predicted)

# printing values
print('Slope:' ,regression_model.coef_)
print('Intercept:', regression_model.intercept_)
print('Mean squared error: ', mse)
print('Root mean squared error: ', mse**(1/2.0))
print('R2 score: ', r2)