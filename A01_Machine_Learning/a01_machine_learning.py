# -*- coding: utf-8 -*-
"""A01_Machine_Learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15MgWQW__6lLkSpm7ttQP4IcWf4yOhE3F

Read the file "Scroe.csv".

Fill the Null or NA values with average of respective student.
"""

import pandas as pd

score = pd.read_csv("Score.csv")

student_means = score.iloc[:, 3:].mean(axis=1, skipna=True)

score.iloc[20, 3:] = score.iloc[20, 3:].fillna(student_means[20])

display(score)

score.head(21)

"""# New Section

Calculate Avgerage of Each student and store in the column named as "Avg"
"""

score['Avg'] = score.iloc[:, [3, 4, 5, 6,7, 8]].mean(axis=1)

display(score.head(21))

"""On the basis of Average, calculate the progress of student.



```
if average > 5 then set progress to Good,
else if average == 5 then progress is average
else set progress to below average.
```


"""

# Apply the function to create the "Progress" column
import pandas as pd
import numpy as np

# Assuming 'Avg' column exists in the DataFrame
score['Progress'] = np.select([score['Avg'] > 5, score['Avg'] == 5], ['Good', 'Average'], default='Below Average')

# Display the modified DataFrame
display(score)

"""Transform Categorical values into Numerical values."""

from sklearn.preprocessing import LabelEncoder
import pandas as pd

columns_to_encode = ['Progress', 'Subject', 'Section']
label_encoder = LabelEncoder()

for column in columns_to_encode:
    score[f'{column} Numeric'] = label_encoder.fit_transform(score[column])

display(score)

"""Set the s to all the columns except s.no and progress.

Set the label variable to progress.

Split the dataset into test and train.
  1. 1st time train set is set to 70 and test 30
  2. For second time split into 0.20
  3. For third time split into 1:3

"""

import pandas as pd
from sklearn.model_selection import train_test_split

features = score.drop(columns=['S.No', 'Progress', 'Subject', 'Section'])

label = score['Progress Numeric']

X_train_1, X_test_1, y_train_1, y_test_1 = train_test_split(features, label, test_size=0.3, random_state=42)

X_train_2, X_test_2, y_train_2, y_test_2 = train_test_split(features, label, test_size=0.2, random_state=55)

X_train_3, X_test_3, y_train_3, y_test_3 = train_test_split(features, label, test_size=0.25, random_state=123)

"""Apply all the Machine algorithm we had covered in our course to predict the progress of student.

"""

from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, mean_squared_error
import warnings
warnings.filterwarnings("ignore")

# Initialize models

logistic_reg_model = LogisticRegression()
random_forest_model = RandomForestClassifier(random_state=42)
decision_tree_model = DecisionTreeClassifier(random_state=42)


# Train and evaluate Logistic Regression model(1)
logistic_reg_model.fit(X_train_1, y_train_1)
logistic_reg_predictions_1 = logistic_reg_model.predict(X_test_1)
logistic_reg_accuracy_1 = accuracy_score(y_test_1, logistic_reg_predictions_1)

# Train and evaluate Logistic Regression model(2)
logistic_reg_model.fit(X_train_2, y_train_2)
logistic_reg_predictions_2 = logistic_reg_model.predict(X_test_2)
logistic_reg_accuracy_2 = accuracy_score(y_test_2, logistic_reg_predictions_2)

# Train and evaluate Logistic Regression model(3)
logistic_reg_model.fit(X_train_3, y_train_3)
logistic_reg_predictions_3 = logistic_reg_model.predict(X_test_3)
logistic_reg_accuracy_3 = accuracy_score(y_test_3, logistic_reg_predictions_3)


# Train and evaluate Random Forest model(1)
random_forest_model.fit(X_train_1, y_train_1)
random_forest_predictions_1 = random_forest_model.predict(X_test_1)
random_forest_accuracy_1 = accuracy_score(y_test_1, random_forest_predictions_1)

# Train and evaluate Random Forest model(2)
random_forest_model.fit(X_train_2, y_train_2)
random_forest_predictions_2 = random_forest_model.predict(X_test_2)
random_forest_accuracy_2 = accuracy_score(y_test_2, random_forest_predictions_2)

# Train and evaluate Random Forest model(3)
random_forest_model.fit(X_train_3, y_train_3)
random_forest_predictions_3 = random_forest_model.predict(X_test_3)
random_forest_accuracy_3 = accuracy_score(y_test_3, random_forest_predictions_3)

# Train and evaluate Decision Tree model(1)
decision_tree_model.fit(X_train_1, y_train_1)
decision_tree_predictions_1 = decision_tree_model.predict(X_test_1)
decision_tree_accuracy_1 = accuracy_score(y_test_1, decision_tree_predictions_1)

# Train and evaluate Decision Tree model(2)
decision_tree_model.fit(X_train_2, y_train_2)
decision_tree_predictions_2 = decision_tree_model.predict(X_test_2)
decision_tree_accuracy_2 = accuracy_score(y_test_2, decision_tree_predictions_2)

# Train and evaluate Decision Tree model(3)
decision_tree_model.fit(X_train_3, y_train_3)
decision_tree_predictions_3 = decision_tree_model.predict(X_test_3)
decision_tree_accuracy_3 = accuracy_score(y_test_3, decision_tree_predictions_3)

# Print the evaluation results

print(f"Logistic Regression Accuracy (Split 1): {logistic_reg_accuracy_1}")
print(f"Logistic Regression Accuracy (Split 2): {logistic_reg_accuracy_2}")
print(f"Logistic Regression Accuracy (Split 3): {logistic_reg_accuracy_3}")
print(f"Random Forest Accuracy (Split 1): {random_forest_accuracy_1}")
print(f"Random Forest Accuracy (Split 2): {random_forest_accuracy_2}")
print(f"Random Forest Accuracy (Split 3): {random_forest_accuracy_3}")
print(f"Decision Tree Accuracy (Split 1): {decision_tree_accuracy_1}")
print(f"Decision Tree Accuracy (Split 2): {decision_tree_accuracy_2}")
print(f"Decision Tree Accuracy (Split 3): {decision_tree_accuracy_3}")

"""Self Learn:

Learn a new Machine Learning Algorithm Which is not covered in our course and implement it on our score dataset for the prediction of Progress of student.
"""

# Import necessary library for Support Vector Machine
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

# Initialize Support Vector Machine model
svm_model = SVC(random_state=42)

# Train and evaluate Support Vector Machine model (Split 1)
svm_model.fit(X_train_1, y_train_1)
svm_predictions_1 = svm_model.predict(X_test_1)
svm_accuracy_1 = accuracy_score(y_test_1, svm_predictions_1)

# Train and evaluate Support Vector Machine model (Split 2)
svm_model.fit(X_train_2, y_train_2)
svm_predictions_2 = svm_model.predict(X_test_2)
svm_accuracy_2 = accuracy_score(y_test_2, svm_predictions_2)

# Train and evaluate Support Vector Machine model (Split 3)
svm_model.fit(X_train_3, y_train_3)
svm_predictions_3 = svm_model.predict(X_test_3)
svm_accuracy_3 = accuracy_score(y_test_3, svm_predictions_3)

# Print the evaluation results for Support Vector Machine
print(f"Support Vector Machine Accuracy (Split 1): {svm_accuracy_1}")
print(f"Support Vector Machine Accuracy (Split 2): {svm_accuracy_2}")
print(f"Support Vector Machine Accuracy (Split 3): {svm_accuracy_3}")

"""Do's
For each model , use each spliting and get three different results.

Compare the all the model on each spliting.

Result : generate result on the basis of our your thinking.

Visualize your dataset on the each model using matplotlib.
"""

from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

def plot_confusion_matrix(y_true, y_pred, model_name):
    cm = confusion_matrix(y_true, y_pred)
    sns.heatmap(cm, annot=True, fmt=".0f", cmap='Blues', xticklabels=['No', 'Yes'], yticklabels=['No', 'Yes'])
    plt.xlabel('Predicted')
    plt.ylabel('Actual')
    plt.title(f'Confusion Matrix - {model_name}')
    plt.show()

plot_confusion_matrix(y_test_1, logistic_reg_predictions_1, 'Logistic Regression')
plot_confusion_matrix(y_test_1,random_forest_predictions_1, 'Random Forest')
plot_confusion_matrix(y_test_1, decision_tree_predictions_1, 'Decision Tree')
plot_confusion_matrix(y_test_1, svm_predictions_1, 'Support Vector Machine')

import matplotlib.pyplot as plt

# Create lists for model names, accuracies, and splits

models = ['Logistic Regression', 'Random Forest', 'Decision Tree', 'Support Vector Machine']
accuracies_1 = [logistic_reg_accuracy_1, random_forest_accuracy_1, decision_tree_accuracy_1, svm_accuracy_1]
accuracies_2 = [logistic_reg_accuracy_2, random_forest_accuracy_2, decision_tree_accuracy_2, svm_accuracy_2]
accuracies_3 = [logistic_reg_accuracy_3, random_forest_accuracy_3, decision_tree_accuracy_3, svm_accuracy_3]

splits = ['Split 1', 'Split 2', 'Split 3']

# Plotting the results
for i in range(len(models)):
    plt.figure(figsize=(10, 5))

    plt.bar(splits, [accuracies_1[i], accuracies_2[i], accuracies_3[i]], color=['blue', 'green', 'coral'])
    plt.title(f'Accuracy Comparison for {models[i]}')
    plt.ylim(0, 1)
    plt.ylabel('Accuracy')
    plt.show()